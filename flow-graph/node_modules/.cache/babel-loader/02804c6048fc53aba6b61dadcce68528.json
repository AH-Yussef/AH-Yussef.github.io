{"remainingRequest":"/Users/alihassan/The_LOL/Projects/collage_related/SecondYear/Control_Systems/signal-flow-graph-solver/node_modules/babel-loader/lib/index.js!/Users/alihassan/The_LOL/Projects/collage_related/SecondYear/Control_Systems/signal-flow-graph-solver/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/alihassan/The_LOL/Projects/collage_related/SecondYear/Control_Systems/signal-flow-graph-solver/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/alihassan/The_LOL/Projects/collage_related/SecondYear/Control_Systems/signal-flow-graph-solver/src/components/header/solveSection.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/alihassan/The_LOL/Projects/collage_related/SecondYear/Control_Systems/signal-flow-graph-solver/src/components/header/solveSection.vue","mtime":1619907819349},{"path":"/Users/alihassan/The_LOL/Projects/collage_related/SecondYear/Control_Systems/signal-flow-graph-solver/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/alihassan/The_LOL/Projects/collage_related/SecondYear/Control_Systems/signal-flow-graph-solver/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/alihassan/The_LOL/Projects/collage_related/SecondYear/Control_Systems/signal-flow-graph-solver/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/alihassan/The_LOL/Projects/collage_related/SecondYear/Control_Systems/signal-flow-graph-solver/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["solveSection.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div id=\"solution\">\n    <div id=\"solve-btn\" @click=\"triggerSolve()\">Solve</div>\n  </div>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex';\nimport { solveforwardpath } from \"../../solvingAlgo/forward_paths.js\";\nimport { findLoops } from \"../../solvingAlgo/loops.js\";\nimport { transferFunction } from \"../../solvingAlgo/Transfer_ function.js\";\n\nexport default {\n  name: 'solve',\n  data() {\n    return {\n      nodeNum: 0,\n    }\n  },\n  computed: mapGetters(['nodes']),\n  methods: {\n    triggerSolve() {\n      // const graphInfo = this.getGraphInfo();\n      // const graphInfo =  [[0,1,0,0,1,0,0,1,0],\n      //                     [0,0,1,0,0,0,1,0,1],\n      //                     [1,1,0,1,0,1,0,0,0],\n      //                     [0,0,0,0,1,0,0,0,0],\n      //                     [0,1,0,0,0,0,0,0,0],\n      //                     [0,0,0,1,0,0,0,0,0],\n      //                     [0,0,0,0,0,0,0,0,0],\n      //                     [0,0,0,0,0,0,0,0,1],\n      //                     [0,0,0,0,0,0,0,1,0]];\n\n      const graphInfo = this.getGraphInfo();\n\n      this.nodeNum = graphInfo.length;\n\n      const forwardPaths = solveforwardpath(graphInfo);\n      const loops = findLoops(graphInfo);\n\n      // const testloops = {\n      //   loops : [[3,4,3], [4,5,4], [6,6], [2,6,5,2], [2,3,4,5,2]],\n      //   gains : [-10,-4,-1,-20,-100]\n      // };\n      // const testpaths = {\n      //   paths : [[1,2,3,4,5], [1,2,6,5]],\n      //   gains : [100, 20]\n      // }\n\n      const computations = transferFunction(forwardPaths, loops);\n      console.log(forwardPaths);\n      console.log(loops);\n\n      this.openSolutionArea();\n      this.showSolution(forwardPaths, loops, computations);\n      document.getElementById(\"board\").style.pointerEvents = 'none';\n    },\n    getGraphInfo() {\n      const matrixSize = this.nodes.size;\n      const graphInfo = new Array(matrixSize);\n\n      for(let node of this.nodes.values()) {\n        node.unselectSelf();\n\n        const outcomingBranches = node.toConnectionPoint.outConnectors.values();\n        const node_nodeGains = new Array(matrixSize).fill(0);\n        let toNodeIndex = 0;\n        \n        for(let branch of outcomingBranches) {\n          if(branch.to.isOutputNode) toNodeIndex = matrixSize -1;\n          else toNodeIndex = branch.to.code;\n          node_nodeGains[toNodeIndex] = branch.gain;\n        }\n\n        let nodeIndex = 0;\n        if(node.isInputNode) nodeIndex = 0;\n        else if(node.isOutputNode) nodeIndex = matrixSize -1;\n        else nodeIndex = node.code;\n\n        graphInfo[nodeIndex] = node_nodeGains;\n      }\n\n      return graphInfo;\n    },\n    showSolution(forwardPaths, graphLoops, computations){\n      document.getElementById(\"steps\").innerHTML = \"\";\n      this.addTitle(\"Forward paths :\");\n\n      let pathIndex = 1;\n      for(let path of forwardPaths.paths) {\n        this.addPath(path, pathIndex++);\n      }\n\n      this.addTitle(\"Loops :\");\n\n      let loopIndex = 1;\n      for(let loop of graphLoops.loops) {\n        this.addLoop(loop, loopIndex++);\n      }\n\n      this.addTitle(\"Transfer function :\");\n\n      let deltaIndex = 1;\n      for(let delta of computations.deltas) {\n        this.addDelta(delta, deltaIndex++);\n      }\n      this.addDelta(computations.systemDelta, deltaIndex, false);\n\n      this.addFormula();\n      this.RenderLatex();\n    },\n    addTitle(titleText){\n      const title = document.createElement('div');\n      title.innerHTML = `$$\\\\underline{\\\\text{${titleText}}}$$`;\n      title.className = \"solve-title\";\n      document.getElementById(\"steps\").appendChild(title);\n    },\n    addPath(pathSeq, pathIndex) {\n      const n = pathSeq.length;\n      let path = document.createElement('div');\n      path.innerHTML = `$$P_${pathIndex} :`;\n\n      for(let i = 0; i < n -1; i++) {\n        path.innerHTML += `${this._getNodeIndex(pathSeq[i])} \\\\xrightarrow{}`;\n      }\n      path.innerHTML += `${this._getNodeIndex(pathSeq[n-1])}$$`;\n\n      path.className = \"solution-info\";\n      document.getElementById(\"steps\").appendChild(path);\n    },\n    addLoop(loopSeq, loopIndex) {\n      const n = loopSeq.length;\n      let loop = document.createElement('div');\n      loop.innerHTML = `$$L_${loopIndex}: `;\n\n      for(let i = 0; i < n -1; i++) {\n        loop.innerHTML += `${this._getNodeIndex(loopSeq[i])} \\\\xrightarrow{}`;\n      }\n      loop.innerHTML += `${this._getNodeIndex(loopSeq[n-1])}$$`;\n\n      loop.className = \"solution-info\";\n      document.getElementById(\"steps\").appendChild(loop);\n    },\n    addDelta(deltaValue, deltaIndex, addSubIndex = true) {\n      let delta = document.createElement('div');\n      if(addSubIndex) delta.innerHTML = `$$\\\\Delta_${deltaIndex} = ${deltaValue}$$`;\n      else delta.innerHTML = `$$\\\\Delta = ${deltaValue}$$`;\n\n      delta.className = \"solution-info\";\n      document.getElementById(\"steps\").appendChild(delta);\n    },\n    addFormula() {\n      let formula = document.createElement('div');\n      formula.innerHTML = \"$$C(S) / R(S) = 5$$\";\n      formula.className = \"solution-info\";\n      document.getElementById(\"steps\").appendChild(formula);\n    },\n    _getNodeIndex(nodeCode) {\n      let nodeIndex = \"\";\n      if(nodeCode == 0) nodeIndex = \"R\";\n      else if(nodeCode == this.nodeNum-1) nodeIndex = \"C\";\n      else nodeIndex = nodeCode;\n\n      return nodeIndex;\n    },\n    openSolutionArea() {\n      this.$root.$refs.solutionArea.open();\n      document.getElementById(\"board\").style.transform = \"scale(0.5)\";\n      document.getElementById(\"board\").style.left = \"-40%\";\n    },\n    RenderLatex() {\n      if(window.MathJax) {\n        window.MathJax.Hub.Queue([\"Typeset\", window.MathJax.Hub]);\n      }\n    }\n  },\n}\n</script>\n\n<style scoped>\n#solution {\n  height: 100%;\n  width: 10rem;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n#solve-btn { \n  background-color: rgb(30, 89, 202);\n  border-radius: 0.5rem;\n  height: 2rem;\n  width: 6rem;\n\n  text-align: center;\n  vertical-align: center;\n  line-height: 2rem;\n\n  color: white;\n  user-select: none;\n}\n</style>"],"sourceRoot":"src/components/header"}]}