{"remainingRequest":"/Users/alihassan/The_LOL/Projects/collage_related/SecondYear/Control_Systems/signal-flow-graph-solver/node_modules/babel-loader/lib/index.js!/Users/alihassan/The_LOL/Projects/collage_related/SecondYear/Control_Systems/signal-flow-graph-solver/node_modules/eslint-loader/index.js??ref--13-0!/Users/alihassan/The_LOL/Projects/collage_related/SecondYear/Control_Systems/signal-flow-graph-solver/src/solvingAlgo/forward_paths.js","dependencies":[{"path":"/Users/alihassan/The_LOL/Projects/collage_related/SecondYear/Control_Systems/signal-flow-graph-solver/src/solvingAlgo/forward_paths.js","mtime":1619293096502},{"path":"/Users/alihassan/The_LOL/Projects/collage_related/SecondYear/Control_Systems/signal-flow-graph-solver/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/alihassan/The_LOL/Projects/collage_related/SecondYear/Control_Systems/signal-flow-graph-solver/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/alihassan/The_LOL/Projects/collage_related/SecondYear/Control_Systems/signal-flow-graph-solver/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF90b0NvbnN1bWFibGVBcnJheSBmcm9tICIvVXNlcnMvYWxpaGFzc2FuL1RoZV9MT0wvUHJvamVjdHMvY29sbGFnZV9yZWxhdGVkL1NlY29uZFllYXIvQ29udHJvbF9TeXN0ZW1zL3NpZ25hbC1mbG93LWdyYXBoLXNvbHZlci9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdG9Db25zdW1hYmxlQXJyYXkiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5maWxsLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkucmVkdWNlLmpzIjsKdmFyIGZvcndhcmRQYXRocyA9IFtdOyAvL2FycmF5IG9mIHBhdGhzCgp2YXIgZm9yd2FyZEdhaW5zID0gW107IC8vYXJyYXkgb2YgZ2FpbnMKCnZhciB2aXNpdGVkID0gW107CmV4cG9ydCBmdW5jdGlvbiBzb2x2ZWZvcndhcmRwYXRoKGdyYXBoKSB7CiAgLy9yZXNldAogIGZvcndhcmRQYXRocy5sZW5ndGggPSAwOwogIGZvcndhcmRHYWlucy5sZW5ndGggPSAwOwogIHZpc2l0ZWQgPSBuZXcgQXJyYXkoZ3JhcGgubGVuZ3RoKS5maWxsKGZhbHNlKTsKICB2YXIgc3RhcnRWZXJ0ZXggPSAwOwogIGZvcndhcmRkZnMoZ3JhcGgsIHN0YXJ0VmVydGV4KTsKICByZXR1cm4gewogICAgcGF0aHM6IGZvcndhcmRQYXRocywKICAgIGdhaW5zOiBmb3J3YXJkR2FpbnMKICB9Owp9CgpmdW5jdGlvbiBmb3J3YXJkZGZzKGdyYXBoLCB2KSB7CiAgdmFyIGN1cnJwYXRoID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBbXTsKICB2YXIgY3VycmdhaW4gPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IFtdOwogIHZpc2l0ZWRbdl0gPSB0cnVlOwogIGN1cnJwYXRoLnB1c2godik7IC8vaWYgd2UgcmVhY2hlZCBlbmQgbm9kZQoKICBpZiAodiA9PSBncmFwaC5sZW5ndGggLSAxKSB7CiAgICAvL2FkZCBwYXRoIGFuZCBnYWluCiAgICBmb3J3YXJkUGF0aHMucHVzaChfdG9Db25zdW1hYmxlQXJyYXkoY3VycnBhdGgpKTsKICAgIGZvcndhcmRHYWlucy5wdXNoKF90b0NvbnN1bWFibGVBcnJheShjdXJyZ2FpbikucmVkdWNlKGZ1bmN0aW9uIChhLCBiKSB7CiAgICAgIHJldHVybiBhICogYjsKICAgIH0pKTsKICB9IGVsc2UgewogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBncmFwaC5sZW5ndGg7IGkrKykgewogICAgICBpZiAoIXZpc2l0ZWRbaV0gJiYgZ3JhcGhbdl1baV0gIT0gMCkgewogICAgICAgIGN1cnJnYWluLnB1c2goZ3JhcGhbdl1baV0pOwogICAgICAgIGZvcndhcmRkZnMoZ3JhcGgsIGksIGN1cnJwYXRoLCBjdXJyZ2Fpbik7CiAgICAgIH0KICAgIH0KICB9IC8vcmVtb3ZlIGxhc3Qgbm9kZSAsYXMgaXQgaXMgdmlzaXRlZCBvciB0aGUgZW5kIG5vZGUgaW4gcGF0aAoKCiAgY3VycnBhdGgucG9wKCk7IC8vdG8gYXBwZW5kIGEgbmV3IHBhdGggbWFrZSB0aGUgbm9kZXMgd2hpY2ggZm9ybSBpdCBhcyBub24gdmlzaXRlZAogIC8vc28gaXQgY2FuIGJlIGZvdW5kIGJ5IGRmcwoKICBpZiAoY3VycmdhaW4ubGVuZ3RoID4gMCkgewogICAgY3VycmdhaW4ucG9wKCk7CiAgICB2aXNpdGVkW3ZdID0gZmFsc2U7CiAgfQp9"},{"version":3,"sources":["/Users/alihassan/The_LOL/Projects/collage_related/SecondYear/Control_Systems/signal-flow-graph-solver/src/solvingAlgo/forward_paths.js"],"names":["forwardPaths","forwardGains","visited","solveforwardpath","graph","length","Array","fill","startVertex","forwarddfs","paths","gains","v","currpath","currgain","push","reduce","a","b","i","pop"],"mappings":";;;AAAA,IAAIA,YAAY,GAAG,EAAnB,C,CAAuB;;AACvB,IAAIC,YAAY,GAAG,EAAnB,C,CAAuB;;AAEvB,IAAIC,OAAO,GAAG,EAAd;AAEA,OAAO,SAASC,gBAAT,CAA0BC,KAA1B,EAAgC;AACtC;AACAJ,EAAAA,YAAY,CAACK,MAAb,GAAsB,CAAtB;AACAJ,EAAAA,YAAY,CAACI,MAAb,GAAsB,CAAtB;AAEAH,EAAAA,OAAO,GAAG,IAAII,KAAJ,CAAUF,KAAK,CAACC,MAAhB,EAAwBE,IAAxB,CAA6B,KAA7B,CAAV;AACC,MAAMC,WAAW,GAAG,CAApB;AAEAC,EAAAA,UAAU,CAACL,KAAD,EAAOI,WAAP,CAAV;AAEA,SAAO;AAAEE,IAAAA,KAAK,EAACV,YAAR;AAAuBW,IAAAA,KAAK,EAACV;AAA7B,GAAP;AACD;;AAED,SAASQ,UAAT,CAAoBL,KAApB,EAA0BQ,CAA1B,EAAoD;AAAA,MAAxBC,QAAwB,uEAAf,EAAe;AAAA,MAAZC,QAAY,uEAAH,EAAG;AAChDZ,EAAAA,OAAO,CAACU,CAAD,CAAP,GAAa,IAAb;AACAC,EAAAA,QAAQ,CAACE,IAAT,CAAcH,CAAd,EAFgD,CAGhD;;AACA,MAAGA,CAAC,IAAIR,KAAK,CAACC,MAAN,GAAc,CAAtB,EAAwB;AACpB;AACAL,IAAAA,YAAY,CAACe,IAAb,oBAAsBF,QAAtB;AACAZ,IAAAA,YAAY,CAACc,IAAb,CAAkB,mBAAID,QAAJ,EAAcE,MAAd,CAAsB,UAACC,CAAD,EAAGC,CAAH;AAAA,aAASD,CAAC,GAACC,CAAX;AAAA,KAAtB,CAAlB;AACH,GAJD,MAKK;AACN,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGf,KAAK,CAACC,MAA1B,EAAkCc,CAAC,EAAnC,EAAsC;AACrC,UAAI,CAACjB,OAAO,CAACiB,CAAD,CAAR,IAAef,KAAK,CAACQ,CAAD,CAAL,CAASO,CAAT,KAAe,CAAlC,EAAoC;AACnCL,QAAAA,QAAQ,CAACC,IAAT,CAAcX,KAAK,CAACQ,CAAD,CAAL,CAASO,CAAT,CAAd;AACAV,QAAAA,UAAU,CAACL,KAAD,EAAOe,CAAP,EAASN,QAAT,EAAkBC,QAAlB,CAAV;AACA;AACD;AACC,GAhB+C,CAiBhD;;;AACAD,EAAAA,QAAQ,CAACO,GAAT,GAlBgD,CAmBhD;AACA;;AACA,MAAGN,QAAQ,CAACT,MAAT,GAAkB,CAArB,EAAuB;AACrBS,IAAAA,QAAQ,CAACM,GAAT;AACAlB,IAAAA,OAAO,CAACU,CAAD,CAAP,GAAa,KAAb;AACD;AACJ","sourcesContent":["let forwardPaths = []; //array of paths\r\nlet forwardGains = []; //array of gains\r\n\r\nlet visited = []\r\n\r\nexport function solveforwardpath(graph){\r\n\t//reset\r\n\tforwardPaths.length = 0;\r\n\tforwardGains.length = 0;\r\n\r\n\tvisited = new Array(graph.length).fill(false);\r\n  const startVertex = 0;\r\n\r\n  forwarddfs(graph,startVertex);\r\n\r\n  return { paths:forwardPaths , gains:forwardGains }\r\n}\r\n\r\nfunction forwarddfs(graph,v,currpath=[],currgain=[]){\r\n    visited[v] = true ;\r\n    currpath.push(v)\r\n    //if we reached end node\r\n    if(v == graph.length -1){\r\n        //add path and gain\r\n        forwardPaths.push([...currpath])\r\n        forwardGains.push([...currgain].reduce( (a,b) => a*b))\r\n    }\r\n    else {\r\n\t\t\tfor (var i = 0; i < graph.length; i++){\r\n\t\t\t\tif (!visited[i] && graph[v][i] != 0){\r\n\t\t\t\t\tcurrgain.push(graph[v][i])\r\n\t\t\t\t\tforwarddfs(graph,i,currpath,currgain)\r\n\t\t\t\t}\r\n\t\t\t}\r\n    }\r\n    //remove last node ,as it is visited or the end node in path\r\n    currpath.pop()\r\n    //to append a new path make the nodes which form it as non visited\r\n    //so it can be found by dfs\r\n    if(currgain.length > 0){\r\n      currgain.pop()\r\n      visited[v] = false\r\n    }\r\n}\r\n"]}]}