{"remainingRequest":"/Users/alihassan/The_LOL/Projects/collage_related/SecondYear/Control_Systems/signal-flow-graph-solver/node_modules/babel-loader/lib/index.js!/Users/alihassan/The_LOL/Projects/collage_related/SecondYear/Control_Systems/signal-flow-graph-solver/node_modules/eslint-loader/index.js??ref--13-0!/Users/alihassan/The_LOL/Projects/collage_related/SecondYear/Control_Systems/signal-flow-graph-solver/src/solvingAlgo/forward_paths.js","dependencies":[{"path":"/Users/alihassan/The_LOL/Projects/collage_related/SecondYear/Control_Systems/signal-flow-graph-solver/src/solvingAlgo/forward_paths.js","mtime":1619301382955},{"path":"/Users/alihassan/The_LOL/Projects/collage_related/SecondYear/Control_Systems/signal-flow-graph-solver/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/alihassan/The_LOL/Projects/collage_related/SecondYear/Control_Systems/signal-flow-graph-solver/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/alihassan/The_LOL/Projects/collage_related/SecondYear/Control_Systems/signal-flow-graph-solver/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF90b0NvbnN1bWFibGVBcnJheSBmcm9tICIvVXNlcnMvYWxpaGFzc2FuL1RoZV9MT0wvUHJvamVjdHMvY29sbGFnZV9yZWxhdGVkL1NlY29uZFllYXIvQ29udHJvbF9TeXN0ZW1zL3NpZ25hbC1mbG93LWdyYXBoLXNvbHZlci9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdG9Db25zdW1hYmxlQXJyYXkiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5maWxsLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkucmVkdWNlLmpzIjsKdmFyIGZvcndhcmRQYXRocyA9IFtdOyAvL2FycmF5IG9mIHBhdGhzCgp2YXIgZm9yd2FyZEdhaW5zID0gW107IC8vYXJyYXkgb2YgZ2FpbnMKCnZhciB2aXNpdGVkID0gW107CmV4cG9ydCBmdW5jdGlvbiBzb2x2ZWZvcndhcmRwYXRoKGdyYXBoKSB7CiAgLy9yZXNldAogIGZvcndhcmRQYXRocy5sZW5ndGggPSAwOwogIGZvcndhcmRHYWlucy5sZW5ndGggPSAwOwogIHZpc2l0ZWQgPSBuZXcgQXJyYXkoZ3JhcGgubGVuZ3RoKS5maWxsKGZhbHNlKTsKICB2YXIgc3RhcnRWZXJ0ZXggPSAwOwogIGZvcndhcmRkZnMoZ3JhcGgsIHN0YXJ0VmVydGV4KTsgLy8gZm9yKGxldCBpID0gMDsgaSA8IGZvcndhcmRQYXRocy5sZW5ndGg7IGkrKykgewogIC8vICAgY29uc3QgcGF0aCA9IGZvcndhcmRQYXRoc1tpXTsKICAvLyAgIGZvcihsZXQgaiA9IDE7IGogPCBwYXRoLmxlbmd0aDsgaisrKSB7CiAgLy8gICAgIGlmIChwYXRoW2otMV0gPiBwYXRoW2pdKXsKICAvLyAgICAgICBmb3J3YXJkUGF0aHMuc3BsaWNlKGksIDEpOwogIC8vICAgICAgIGJyZWFrOwogIC8vICAgICB9CiAgLy8gICB9CiAgLy8gfSAKCiAgcmV0dXJuIHsKICAgIHBhdGhzOiBmb3J3YXJkUGF0aHMsCiAgICBnYWluczogZm9yd2FyZEdhaW5zCiAgfTsKfQoKZnVuY3Rpb24gZm9yd2FyZGRmcyhncmFwaCwgdikgewogIHZhciBjdXJycGF0aCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogW107CiAgdmFyIGN1cnJnYWluID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiBbXTsKICB2aXNpdGVkW3ZdID0gdHJ1ZTsKICBjdXJycGF0aC5wdXNoKHYpOyAvL2lmIHdlIHJlYWNoZWQgZW5kIG5vZGUKCiAgaWYgKHYgPT0gZ3JhcGgubGVuZ3RoIC0gMSkgewogICAgLy9hZGQgcGF0aCBhbmQgZ2FpbgogICAgZm9yd2FyZFBhdGhzLnB1c2goX3RvQ29uc3VtYWJsZUFycmF5KGN1cnJwYXRoKSk7CiAgICBmb3J3YXJkR2FpbnMucHVzaChfdG9Db25zdW1hYmxlQXJyYXkoY3VycmdhaW4pLnJlZHVjZShmdW5jdGlvbiAoYSwgYikgewogICAgICByZXR1cm4gYSAqIGI7CiAgICB9KSk7CiAgfSBlbHNlIHsKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZ3JhcGgubGVuZ3RoOyBpKyspIHsKICAgICAgaWYgKCF2aXNpdGVkW2ldICYmIGdyYXBoW3ZdW2ldICE9IDApIHsKICAgICAgICBjdXJyZ2Fpbi5wdXNoKGdyYXBoW3ZdW2ldKTsKICAgICAgICBmb3J3YXJkZGZzKGdyYXBoLCBpLCBjdXJycGF0aCwgY3VycmdhaW4pOwogICAgICB9CiAgICB9CiAgfSAvL3JlbW92ZSBsYXN0IG5vZGUgLGFzIGl0IGlzIHZpc2l0ZWQgb3IgdGhlIGVuZCBub2RlIGluIHBhdGgKCgogIGN1cnJwYXRoLnBvcCgpOyAvL3RvIGFwcGVuZCBhIG5ldyBwYXRoIG1ha2UgdGhlIG5vZGVzIHdoaWNoIGZvcm0gaXQgYXMgbm9uIHZpc2l0ZWQKICAvL3NvIGl0IGNhbiBiZSBmb3VuZCBieSBkZnMKCiAgaWYgKGN1cnJnYWluLmxlbmd0aCA+IDApIHsKICAgIGN1cnJnYWluLnBvcCgpOwogICAgdmlzaXRlZFt2XSA9IGZhbHNlOwogIH0KfQ=="},{"version":3,"sources":["/Users/alihassan/The_LOL/Projects/collage_related/SecondYear/Control_Systems/signal-flow-graph-solver/src/solvingAlgo/forward_paths.js"],"names":["forwardPaths","forwardGains","visited","solveforwardpath","graph","length","Array","fill","startVertex","forwarddfs","paths","gains","v","currpath","currgain","push","reduce","a","b","i","pop"],"mappings":";;;AAAA,IAAIA,YAAY,GAAG,EAAnB,C,CAAuB;;AACvB,IAAIC,YAAY,GAAG,EAAnB,C,CAAuB;;AAEvB,IAAIC,OAAO,GAAG,EAAd;AAEA,OAAO,SAASC,gBAAT,CAA0BC,KAA1B,EAAgC;AACtC;AACAJ,EAAAA,YAAY,CAACK,MAAb,GAAsB,CAAtB;AACAJ,EAAAA,YAAY,CAACI,MAAb,GAAsB,CAAtB;AAEAH,EAAAA,OAAO,GAAG,IAAII,KAAJ,CAAUF,KAAK,CAACC,MAAhB,EAAwBE,IAAxB,CAA6B,KAA7B,CAAV;AACC,MAAMC,WAAW,GAAG,CAApB;AAEAC,EAAAA,UAAU,CAACL,KAAD,EAAOI,WAAP,CAAV,CARqC,CAUrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAO;AAAEE,IAAAA,KAAK,EAACV,YAAR;AAAuBW,IAAAA,KAAK,EAACV;AAA7B,GAAP;AACD;;AAED,SAASQ,UAAT,CAAoBL,KAApB,EAA0BQ,CAA1B,EAAoD;AAAA,MAAxBC,QAAwB,uEAAf,EAAe;AAAA,MAAZC,QAAY,uEAAH,EAAG;AAChDZ,EAAAA,OAAO,CAACU,CAAD,CAAP,GAAa,IAAb;AACAC,EAAAA,QAAQ,CAACE,IAAT,CAAcH,CAAd,EAFgD,CAGhD;;AACA,MAAGA,CAAC,IAAIR,KAAK,CAACC,MAAN,GAAc,CAAtB,EAAwB;AACpB;AACAL,IAAAA,YAAY,CAACe,IAAb,oBAAsBF,QAAtB;AACAZ,IAAAA,YAAY,CAACc,IAAb,CAAkB,mBAAID,QAAJ,EAAcE,MAAd,CAAsB,UAACC,CAAD,EAAGC,CAAH;AAAA,aAASD,CAAC,GAACC,CAAX;AAAA,KAAtB,CAAlB;AACH,GAJD,MAKK;AACN,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGf,KAAK,CAACC,MAA1B,EAAkCc,CAAC,EAAnC,EAAsC;AACrC,UAAI,CAACjB,OAAO,CAACiB,CAAD,CAAR,IAAef,KAAK,CAACQ,CAAD,CAAL,CAASO,CAAT,KAAe,CAAlC,EAAoC;AACnCL,QAAAA,QAAQ,CAACC,IAAT,CAAcX,KAAK,CAACQ,CAAD,CAAL,CAASO,CAAT,CAAd;AACAV,QAAAA,UAAU,CAACL,KAAD,EAAOe,CAAP,EAASN,QAAT,EAAkBC,QAAlB,CAAV;AACA;AACD;AACC,GAhB+C,CAiBhD;;;AACAD,EAAAA,QAAQ,CAACO,GAAT,GAlBgD,CAmBhD;AACA;;AACA,MAAGN,QAAQ,CAACT,MAAT,GAAkB,CAArB,EAAuB;AACrBS,IAAAA,QAAQ,CAACM,GAAT;AACAlB,IAAAA,OAAO,CAACU,CAAD,CAAP,GAAa,KAAb;AACD;AACJ","sourcesContent":["let forwardPaths = []; //array of paths\r\nlet forwardGains = []; //array of gains\r\n\r\nlet visited = []\r\n\r\nexport function solveforwardpath(graph){\r\n\t//reset\r\n\tforwardPaths.length = 0;\r\n\tforwardGains.length = 0;\r\n\r\n\tvisited = new Array(graph.length).fill(false);\r\n  const startVertex = 0;\r\n\r\n  forwarddfs(graph,startVertex);\r\n\r\n  // for(let i = 0; i < forwardPaths.length; i++) {\r\n  //   const path = forwardPaths[i];\r\n  //   for(let j = 1; j < path.length; j++) {\r\n  //     if (path[j-1] > path[j]){\r\n  //       forwardPaths.splice(i, 1);\r\n  //       break;\r\n  //     }\r\n  //   }\r\n  // } \r\n\r\n  return { paths:forwardPaths , gains:forwardGains }\r\n}\r\n\r\nfunction forwarddfs(graph,v,currpath=[],currgain=[]){\r\n    visited[v] = true ;\r\n    currpath.push(v)\r\n    //if we reached end node\r\n    if(v == graph.length -1){\r\n        //add path and gain\r\n        forwardPaths.push([...currpath])\r\n        forwardGains.push([...currgain].reduce( (a,b) => a*b))\r\n    }\r\n    else {\r\n\t\t\tfor (var i = 0; i < graph.length; i++){\r\n\t\t\t\tif (!visited[i] && graph[v][i] != 0){\r\n\t\t\t\t\tcurrgain.push(graph[v][i])\r\n\t\t\t\t\tforwarddfs(graph,i,currpath,currgain)\r\n\t\t\t\t}\r\n\t\t\t}\r\n    }\r\n    //remove last node ,as it is visited or the end node in path\r\n    currpath.pop()\r\n    //to append a new path make the nodes which form it as non visited\r\n    //so it can be found by dfs\r\n    if(currgain.length > 0){\r\n      currgain.pop()\r\n      visited[v] = false\r\n    }\r\n}\r\n"]}]}