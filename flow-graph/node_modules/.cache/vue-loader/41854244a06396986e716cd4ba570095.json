{"remainingRequest":"/Users/alihassan/The_LOL/Projects/collage_related/SecondYear/Control_Systems/signal-flow-graph-solver/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/alihassan/The_LOL/Projects/collage_related/SecondYear/Control_Systems/signal-flow-graph-solver/src/components/header/solveSection.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/alihassan/The_LOL/Projects/collage_related/SecondYear/Control_Systems/signal-flow-graph-solver/src/components/header/solveSection.vue","mtime":1619907819349},{"path":"/Users/alihassan/The_LOL/Projects/collage_related/SecondYear/Control_Systems/signal-flow-graph-solver/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/alihassan/The_LOL/Projects/collage_related/SecondYear/Control_Systems/signal-flow-graph-solver/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/alihassan/The_LOL/Projects/collage_related/SecondYear/Control_Systems/signal-flow-graph-solver/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/alihassan/The_LOL/Projects/collage_related/SecondYear/Control_Systems/signal-flow-graph-solver/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB7IG1hcEdldHRlcnMgfSBmcm9tICd2dWV4JzsKaW1wb3J0IHsgc29sdmVmb3J3YXJkcGF0aCB9IGZyb20gIi4uLy4uL3NvbHZpbmdBbGdvL2ZvcndhcmRfcGF0aHMuanMiOwppbXBvcnQgeyBmaW5kTG9vcHMgfSBmcm9tICIuLi8uLi9zb2x2aW5nQWxnby9sb29wcy5qcyI7CmltcG9ydCB7IHRyYW5zZmVyRnVuY3Rpb24gfSBmcm9tICIuLi8uLi9zb2x2aW5nQWxnby9UcmFuc2Zlcl8gZnVuY3Rpb24uanMiOwoKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICdzb2x2ZScsCiAgZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIG5vZGVOdW06IDAsCiAgICB9CiAgfSwKICBjb21wdXRlZDogbWFwR2V0dGVycyhbJ25vZGVzJ10pLAogIG1ldGhvZHM6IHsKICAgIHRyaWdnZXJTb2x2ZSgpIHsKICAgICAgLy8gY29uc3QgZ3JhcGhJbmZvID0gdGhpcy5nZXRHcmFwaEluZm8oKTsKICAgICAgLy8gY29uc3QgZ3JhcGhJbmZvID0gIFtbMCwxLDAsMCwxLDAsMCwxLDBdLAogICAgICAvLyAgICAgICAgICAgICAgICAgICAgIFswLDAsMSwwLDAsMCwxLDAsMV0sCiAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgWzEsMSwwLDEsMCwxLDAsMCwwXSwKICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBbMCwwLDAsMCwxLDAsMCwwLDBdLAogICAgICAvLyAgICAgICAgICAgICAgICAgICAgIFswLDEsMCwwLDAsMCwwLDAsMF0sCiAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgWzAsMCwwLDEsMCwwLDAsMCwwXSwKICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBbMCwwLDAsMCwwLDAsMCwwLDBdLAogICAgICAvLyAgICAgICAgICAgICAgICAgICAgIFswLDAsMCwwLDAsMCwwLDAsMV0sCiAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgWzAsMCwwLDAsMCwwLDAsMSwwXV07CgogICAgICBjb25zdCBncmFwaEluZm8gPSB0aGlzLmdldEdyYXBoSW5mbygpOwoKICAgICAgdGhpcy5ub2RlTnVtID0gZ3JhcGhJbmZvLmxlbmd0aDsKCiAgICAgIGNvbnN0IGZvcndhcmRQYXRocyA9IHNvbHZlZm9yd2FyZHBhdGgoZ3JhcGhJbmZvKTsKICAgICAgY29uc3QgbG9vcHMgPSBmaW5kTG9vcHMoZ3JhcGhJbmZvKTsKCiAgICAgIC8vIGNvbnN0IHRlc3Rsb29wcyA9IHsKICAgICAgLy8gICBsb29wcyA6IFtbMyw0LDNdLCBbNCw1LDRdLCBbNiw2XSwgWzIsNiw1LDJdLCBbMiwzLDQsNSwyXV0sCiAgICAgIC8vICAgZ2FpbnMgOiBbLTEwLC00LC0xLC0yMCwtMTAwXQogICAgICAvLyB9OwogICAgICAvLyBjb25zdCB0ZXN0cGF0aHMgPSB7CiAgICAgIC8vICAgcGF0aHMgOiBbWzEsMiwzLDQsNV0sIFsxLDIsNiw1XV0sCiAgICAgIC8vICAgZ2FpbnMgOiBbMTAwLCAyMF0KICAgICAgLy8gfQoKICAgICAgY29uc3QgY29tcHV0YXRpb25zID0gdHJhbnNmZXJGdW5jdGlvbihmb3J3YXJkUGF0aHMsIGxvb3BzKTsKICAgICAgY29uc29sZS5sb2coZm9yd2FyZFBhdGhzKTsKICAgICAgY29uc29sZS5sb2cobG9vcHMpOwoKICAgICAgdGhpcy5vcGVuU29sdXRpb25BcmVhKCk7CiAgICAgIHRoaXMuc2hvd1NvbHV0aW9uKGZvcndhcmRQYXRocywgbG9vcHMsIGNvbXB1dGF0aW9ucyk7CiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJib2FyZCIpLnN0eWxlLnBvaW50ZXJFdmVudHMgPSAnbm9uZSc7CiAgICB9LAogICAgZ2V0R3JhcGhJbmZvKCkgewogICAgICBjb25zdCBtYXRyaXhTaXplID0gdGhpcy5ub2Rlcy5zaXplOwogICAgICBjb25zdCBncmFwaEluZm8gPSBuZXcgQXJyYXkobWF0cml4U2l6ZSk7CgogICAgICBmb3IobGV0IG5vZGUgb2YgdGhpcy5ub2Rlcy52YWx1ZXMoKSkgewogICAgICAgIG5vZGUudW5zZWxlY3RTZWxmKCk7CgogICAgICAgIGNvbnN0IG91dGNvbWluZ0JyYW5jaGVzID0gbm9kZS50b0Nvbm5lY3Rpb25Qb2ludC5vdXRDb25uZWN0b3JzLnZhbHVlcygpOwogICAgICAgIGNvbnN0IG5vZGVfbm9kZUdhaW5zID0gbmV3IEFycmF5KG1hdHJpeFNpemUpLmZpbGwoMCk7CiAgICAgICAgbGV0IHRvTm9kZUluZGV4ID0gMDsKICAgICAgICAKICAgICAgICBmb3IobGV0IGJyYW5jaCBvZiBvdXRjb21pbmdCcmFuY2hlcykgewogICAgICAgICAgaWYoYnJhbmNoLnRvLmlzT3V0cHV0Tm9kZSkgdG9Ob2RlSW5kZXggPSBtYXRyaXhTaXplIC0xOwogICAgICAgICAgZWxzZSB0b05vZGVJbmRleCA9IGJyYW5jaC50by5jb2RlOwogICAgICAgICAgbm9kZV9ub2RlR2FpbnNbdG9Ob2RlSW5kZXhdID0gYnJhbmNoLmdhaW47CiAgICAgICAgfQoKICAgICAgICBsZXQgbm9kZUluZGV4ID0gMDsKICAgICAgICBpZihub2RlLmlzSW5wdXROb2RlKSBub2RlSW5kZXggPSAwOwogICAgICAgIGVsc2UgaWYobm9kZS5pc091dHB1dE5vZGUpIG5vZGVJbmRleCA9IG1hdHJpeFNpemUgLTE7CiAgICAgICAgZWxzZSBub2RlSW5kZXggPSBub2RlLmNvZGU7CgogICAgICAgIGdyYXBoSW5mb1tub2RlSW5kZXhdID0gbm9kZV9ub2RlR2FpbnM7CiAgICAgIH0KCiAgICAgIHJldHVybiBncmFwaEluZm87CiAgICB9LAogICAgc2hvd1NvbHV0aW9uKGZvcndhcmRQYXRocywgZ3JhcGhMb29wcywgY29tcHV0YXRpb25zKXsKICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInN0ZXBzIikuaW5uZXJIVE1MID0gIiI7CiAgICAgIHRoaXMuYWRkVGl0bGUoIkZvcndhcmQgcGF0aHMgOiIpOwoKICAgICAgbGV0IHBhdGhJbmRleCA9IDE7CiAgICAgIGZvcihsZXQgcGF0aCBvZiBmb3J3YXJkUGF0aHMucGF0aHMpIHsKICAgICAgICB0aGlzLmFkZFBhdGgocGF0aCwgcGF0aEluZGV4KyspOwogICAgICB9CgogICAgICB0aGlzLmFkZFRpdGxlKCJMb29wcyA6Iik7CgogICAgICBsZXQgbG9vcEluZGV4ID0gMTsKICAgICAgZm9yKGxldCBsb29wIG9mIGdyYXBoTG9vcHMubG9vcHMpIHsKICAgICAgICB0aGlzLmFkZExvb3AobG9vcCwgbG9vcEluZGV4KyspOwogICAgICB9CgogICAgICB0aGlzLmFkZFRpdGxlKCJUcmFuc2ZlciBmdW5jdGlvbiA6Iik7CgogICAgICBsZXQgZGVsdGFJbmRleCA9IDE7CiAgICAgIGZvcihsZXQgZGVsdGEgb2YgY29tcHV0YXRpb25zLmRlbHRhcykgewogICAgICAgIHRoaXMuYWRkRGVsdGEoZGVsdGEsIGRlbHRhSW5kZXgrKyk7CiAgICAgIH0KICAgICAgdGhpcy5hZGREZWx0YShjb21wdXRhdGlvbnMuc3lzdGVtRGVsdGEsIGRlbHRhSW5kZXgsIGZhbHNlKTsKCiAgICAgIHRoaXMuYWRkRm9ybXVsYSgpOwogICAgICB0aGlzLlJlbmRlckxhdGV4KCk7CiAgICB9LAogICAgYWRkVGl0bGUodGl0bGVUZXh0KXsKICAgICAgY29uc3QgdGl0bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKICAgICAgdGl0bGUuaW5uZXJIVE1MID0gYCQkXFx1bmRlcmxpbmV7XFx0ZXh0eyR7dGl0bGVUZXh0fX19JCRgOwogICAgICB0aXRsZS5jbGFzc05hbWUgPSAic29sdmUtdGl0bGUiOwogICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgic3RlcHMiKS5hcHBlbmRDaGlsZCh0aXRsZSk7CiAgICB9LAogICAgYWRkUGF0aChwYXRoU2VxLCBwYXRoSW5kZXgpIHsKICAgICAgY29uc3QgbiA9IHBhdGhTZXEubGVuZ3RoOwogICAgICBsZXQgcGF0aCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwogICAgICBwYXRoLmlubmVySFRNTCA9IGAkJFBfJHtwYXRoSW5kZXh9IDpgOwoKICAgICAgZm9yKGxldCBpID0gMDsgaSA8IG4gLTE7IGkrKykgewogICAgICAgIHBhdGguaW5uZXJIVE1MICs9IGAke3RoaXMuX2dldE5vZGVJbmRleChwYXRoU2VxW2ldKX0gXFx4cmlnaHRhcnJvd3t9YDsKICAgICAgfQogICAgICBwYXRoLmlubmVySFRNTCArPSBgJHt0aGlzLl9nZXROb2RlSW5kZXgocGF0aFNlcVtuLTFdKX0kJGA7CgogICAgICBwYXRoLmNsYXNzTmFtZSA9ICJzb2x1dGlvbi1pbmZvIjsKICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInN0ZXBzIikuYXBwZW5kQ2hpbGQocGF0aCk7CiAgICB9LAogICAgYWRkTG9vcChsb29wU2VxLCBsb29wSW5kZXgpIHsKICAgICAgY29uc3QgbiA9IGxvb3BTZXEubGVuZ3RoOwogICAgICBsZXQgbG9vcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwogICAgICBsb29wLmlubmVySFRNTCA9IGAkJExfJHtsb29wSW5kZXh9OiBgOwoKICAgICAgZm9yKGxldCBpID0gMDsgaSA8IG4gLTE7IGkrKykgewogICAgICAgIGxvb3AuaW5uZXJIVE1MICs9IGAke3RoaXMuX2dldE5vZGVJbmRleChsb29wU2VxW2ldKX0gXFx4cmlnaHRhcnJvd3t9YDsKICAgICAgfQogICAgICBsb29wLmlubmVySFRNTCArPSBgJHt0aGlzLl9nZXROb2RlSW5kZXgobG9vcFNlcVtuLTFdKX0kJGA7CgogICAgICBsb29wLmNsYXNzTmFtZSA9ICJzb2x1dGlvbi1pbmZvIjsKICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInN0ZXBzIikuYXBwZW5kQ2hpbGQobG9vcCk7CiAgICB9LAogICAgYWRkRGVsdGEoZGVsdGFWYWx1ZSwgZGVsdGFJbmRleCwgYWRkU3ViSW5kZXggPSB0cnVlKSB7CiAgICAgIGxldCBkZWx0YSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwogICAgICBpZihhZGRTdWJJbmRleCkgZGVsdGEuaW5uZXJIVE1MID0gYCQkXFxEZWx0YV8ke2RlbHRhSW5kZXh9ID0gJHtkZWx0YVZhbHVlfSQkYDsKICAgICAgZWxzZSBkZWx0YS5pbm5lckhUTUwgPSBgJCRcXERlbHRhID0gJHtkZWx0YVZhbHVlfSQkYDsKCiAgICAgIGRlbHRhLmNsYXNzTmFtZSA9ICJzb2x1dGlvbi1pbmZvIjsKICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInN0ZXBzIikuYXBwZW5kQ2hpbGQoZGVsdGEpOwogICAgfSwKICAgIGFkZEZvcm11bGEoKSB7CiAgICAgIGxldCBmb3JtdWxhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CiAgICAgIGZvcm11bGEuaW5uZXJIVE1MID0gIiQkQyhTKSAvIFIoUykgPSA1JCQiOwogICAgICBmb3JtdWxhLmNsYXNzTmFtZSA9ICJzb2x1dGlvbi1pbmZvIjsKICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInN0ZXBzIikuYXBwZW5kQ2hpbGQoZm9ybXVsYSk7CiAgICB9LAogICAgX2dldE5vZGVJbmRleChub2RlQ29kZSkgewogICAgICBsZXQgbm9kZUluZGV4ID0gIiI7CiAgICAgIGlmKG5vZGVDb2RlID09IDApIG5vZGVJbmRleCA9ICJSIjsKICAgICAgZWxzZSBpZihub2RlQ29kZSA9PSB0aGlzLm5vZGVOdW0tMSkgbm9kZUluZGV4ID0gIkMiOwogICAgICBlbHNlIG5vZGVJbmRleCA9IG5vZGVDb2RlOwoKICAgICAgcmV0dXJuIG5vZGVJbmRleDsKICAgIH0sCiAgICBvcGVuU29sdXRpb25BcmVhKCkgewogICAgICB0aGlzLiRyb290LiRyZWZzLnNvbHV0aW9uQXJlYS5vcGVuKCk7CiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJib2FyZCIpLnN0eWxlLnRyYW5zZm9ybSA9ICJzY2FsZSgwLjUpIjsKICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImJvYXJkIikuc3R5bGUubGVmdCA9ICItNDAlIjsKICAgIH0sCiAgICBSZW5kZXJMYXRleCgpIHsKICAgICAgaWYod2luZG93Lk1hdGhKYXgpIHsKICAgICAgICB3aW5kb3cuTWF0aEpheC5IdWIuUXVldWUoWyJUeXBlc2V0Iiwgd2luZG93Lk1hdGhKYXguSHViXSk7CiAgICAgIH0KICAgIH0KICB9LAp9Cg=="},{"version":3,"sources":["solveSection.vue"],"names":[],"mappings":";;;;;;;AAOA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"solveSection.vue","sourceRoot":"src/components/header","sourcesContent":["<template>\n  <div id=\"solution\">\n    <div id=\"solve-btn\" @click=\"triggerSolve()\">Solve</div>\n  </div>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex';\nimport { solveforwardpath } from \"../../solvingAlgo/forward_paths.js\";\nimport { findLoops } from \"../../solvingAlgo/loops.js\";\nimport { transferFunction } from \"../../solvingAlgo/Transfer_ function.js\";\n\nexport default {\n  name: 'solve',\n  data() {\n    return {\n      nodeNum: 0,\n    }\n  },\n  computed: mapGetters(['nodes']),\n  methods: {\n    triggerSolve() {\n      // const graphInfo = this.getGraphInfo();\n      // const graphInfo =  [[0,1,0,0,1,0,0,1,0],\n      //                     [0,0,1,0,0,0,1,0,1],\n      //                     [1,1,0,1,0,1,0,0,0],\n      //                     [0,0,0,0,1,0,0,0,0],\n      //                     [0,1,0,0,0,0,0,0,0],\n      //                     [0,0,0,1,0,0,0,0,0],\n      //                     [0,0,0,0,0,0,0,0,0],\n      //                     [0,0,0,0,0,0,0,0,1],\n      //                     [0,0,0,0,0,0,0,1,0]];\n\n      const graphInfo = this.getGraphInfo();\n\n      this.nodeNum = graphInfo.length;\n\n      const forwardPaths = solveforwardpath(graphInfo);\n      const loops = findLoops(graphInfo);\n\n      // const testloops = {\n      //   loops : [[3,4,3], [4,5,4], [6,6], [2,6,5,2], [2,3,4,5,2]],\n      //   gains : [-10,-4,-1,-20,-100]\n      // };\n      // const testpaths = {\n      //   paths : [[1,2,3,4,5], [1,2,6,5]],\n      //   gains : [100, 20]\n      // }\n\n      const computations = transferFunction(forwardPaths, loops);\n      console.log(forwardPaths);\n      console.log(loops);\n\n      this.openSolutionArea();\n      this.showSolution(forwardPaths, loops, computations);\n      document.getElementById(\"board\").style.pointerEvents = 'none';\n    },\n    getGraphInfo() {\n      const matrixSize = this.nodes.size;\n      const graphInfo = new Array(matrixSize);\n\n      for(let node of this.nodes.values()) {\n        node.unselectSelf();\n\n        const outcomingBranches = node.toConnectionPoint.outConnectors.values();\n        const node_nodeGains = new Array(matrixSize).fill(0);\n        let toNodeIndex = 0;\n        \n        for(let branch of outcomingBranches) {\n          if(branch.to.isOutputNode) toNodeIndex = matrixSize -1;\n          else toNodeIndex = branch.to.code;\n          node_nodeGains[toNodeIndex] = branch.gain;\n        }\n\n        let nodeIndex = 0;\n        if(node.isInputNode) nodeIndex = 0;\n        else if(node.isOutputNode) nodeIndex = matrixSize -1;\n        else nodeIndex = node.code;\n\n        graphInfo[nodeIndex] = node_nodeGains;\n      }\n\n      return graphInfo;\n    },\n    showSolution(forwardPaths, graphLoops, computations){\n      document.getElementById(\"steps\").innerHTML = \"\";\n      this.addTitle(\"Forward paths :\");\n\n      let pathIndex = 1;\n      for(let path of forwardPaths.paths) {\n        this.addPath(path, pathIndex++);\n      }\n\n      this.addTitle(\"Loops :\");\n\n      let loopIndex = 1;\n      for(let loop of graphLoops.loops) {\n        this.addLoop(loop, loopIndex++);\n      }\n\n      this.addTitle(\"Transfer function :\");\n\n      let deltaIndex = 1;\n      for(let delta of computations.deltas) {\n        this.addDelta(delta, deltaIndex++);\n      }\n      this.addDelta(computations.systemDelta, deltaIndex, false);\n\n      this.addFormula();\n      this.RenderLatex();\n    },\n    addTitle(titleText){\n      const title = document.createElement('div');\n      title.innerHTML = `$$\\\\underline{\\\\text{${titleText}}}$$`;\n      title.className = \"solve-title\";\n      document.getElementById(\"steps\").appendChild(title);\n    },\n    addPath(pathSeq, pathIndex) {\n      const n = pathSeq.length;\n      let path = document.createElement('div');\n      path.innerHTML = `$$P_${pathIndex} :`;\n\n      for(let i = 0; i < n -1; i++) {\n        path.innerHTML += `${this._getNodeIndex(pathSeq[i])} \\\\xrightarrow{}`;\n      }\n      path.innerHTML += `${this._getNodeIndex(pathSeq[n-1])}$$`;\n\n      path.className = \"solution-info\";\n      document.getElementById(\"steps\").appendChild(path);\n    },\n    addLoop(loopSeq, loopIndex) {\n      const n = loopSeq.length;\n      let loop = document.createElement('div');\n      loop.innerHTML = `$$L_${loopIndex}: `;\n\n      for(let i = 0; i < n -1; i++) {\n        loop.innerHTML += `${this._getNodeIndex(loopSeq[i])} \\\\xrightarrow{}`;\n      }\n      loop.innerHTML += `${this._getNodeIndex(loopSeq[n-1])}$$`;\n\n      loop.className = \"solution-info\";\n      document.getElementById(\"steps\").appendChild(loop);\n    },\n    addDelta(deltaValue, deltaIndex, addSubIndex = true) {\n      let delta = document.createElement('div');\n      if(addSubIndex) delta.innerHTML = `$$\\\\Delta_${deltaIndex} = ${deltaValue}$$`;\n      else delta.innerHTML = `$$\\\\Delta = ${deltaValue}$$`;\n\n      delta.className = \"solution-info\";\n      document.getElementById(\"steps\").appendChild(delta);\n    },\n    addFormula() {\n      let formula = document.createElement('div');\n      formula.innerHTML = \"$$C(S) / R(S) = 5$$\";\n      formula.className = \"solution-info\";\n      document.getElementById(\"steps\").appendChild(formula);\n    },\n    _getNodeIndex(nodeCode) {\n      let nodeIndex = \"\";\n      if(nodeCode == 0) nodeIndex = \"R\";\n      else if(nodeCode == this.nodeNum-1) nodeIndex = \"C\";\n      else nodeIndex = nodeCode;\n\n      return nodeIndex;\n    },\n    openSolutionArea() {\n      this.$root.$refs.solutionArea.open();\n      document.getElementById(\"board\").style.transform = \"scale(0.5)\";\n      document.getElementById(\"board\").style.left = \"-40%\";\n    },\n    RenderLatex() {\n      if(window.MathJax) {\n        window.MathJax.Hub.Queue([\"Typeset\", window.MathJax.Hub]);\n      }\n    }\n  },\n}\n</script>\n\n<style scoped>\n#solution {\n  height: 100%;\n  width: 10rem;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n#solve-btn { \n  background-color: rgb(30, 89, 202);\n  border-radius: 0.5rem;\n  height: 2rem;\n  width: 6rem;\n\n  text-align: center;\n  vertical-align: center;\n  line-height: 2rem;\n\n  color: white;\n  user-select: none;\n}\n</style>"]}]}