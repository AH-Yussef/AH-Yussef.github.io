{"remainingRequest":"/Users/alihassan/The_LOL/Projects/collage_related/SecondYear/Control_Systems/signal-flow-graph-solver/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/alihassan/The_LOL/Projects/collage_related/SecondYear/Control_Systems/signal-flow-graph-solver/src/components/board.vue?vue&type=style&index=0&id=1796d806&scoped=true&lang=css&","dependencies":[{"path":"/Users/alihassan/The_LOL/Projects/collage_related/SecondYear/Control_Systems/signal-flow-graph-solver/src/components/board.vue","mtime":1619221035253},{"path":"/Users/alihassan/The_LOL/Projects/collage_related/SecondYear/Control_Systems/signal-flow-graph-solver/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/alihassan/The_LOL/Projects/collage_related/SecondYear/Control_Systems/signal-flow-graph-solver/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/alihassan/The_LOL/Projects/collage_related/SecondYear/Control_Systems/signal-flow-graph-solver/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/alihassan/The_LOL/Projects/collage_related/SecondYear/Control_Systems/signal-flow-graph-solver/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/alihassan/The_LOL/Projects/collage_related/SecondYear/Control_Systems/signal-flow-graph-solver/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKI2JvYXJkewogIHBvc2l0aW9uOiByZWxhdGl2ZTsKICBtYXJnaW4tdG9wOiAxcHg7CiAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7CiAgei1pbmRleDogMTsKCiAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIC4yczsKfQo="},{"version":3,"sources":["board.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuIA;AACA;AACA;AACA;AACA;;AAEA;AACA","file":"board.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <svg  id=\"board\" :width=\"boardProbs.width\" :height=\"boardProbs.height\"\n        version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\"\n        @mouseover=\"mouseOverHandling()\"\n        @mousedown=\"mouseDownHandling()\"\n        @mouseup=\"mouseUpHandling()\">\n  </svg>\n</template>\n\n<script>\nimport { mapGetters, mapActions} from 'vuex';\nimport { Node } from '../graphComponents/node.js';\nimport { inputNode } from '../graphComponents/inputNode.js';\nimport { outputNode } from '../graphComponents/outputNode.js';\n\nexport default {\n  name: 'board',\n  data() {\n    return {\n      boardProbs: {\n        width: 100,\n        height: 100,\n      },\n      components: {\n        node: \"machine\",\n      },\n      currentComponent: {\n        component: null,\n        startingPos: { x: 0, y: 0 },\n      },\n      mousePointer: {\n        originX: 0,\n        originY: 0,\n        x: 0, //current position relative to x-axis\n        y: 0, //current position relative to y-axis\n        updatePosition: function() {\n          this.x = window.mouseX - this.originX;\n          this.y = window.mouseY - this.originY;\n        },\n      }\n    }\n  },\n  computed: mapGetters(['isDrawing', 'getCurrentComponent', 'getCurrSelectedComponent', 'nodes']),\n  methods: {\n    ...mapActions(['disableDrawingMode', 'pushNewNode', 'setCurrentComponent', 'setBoardMouseDown']),\n    //Drawing Shapes\n    mouseOverHandling(){\n      const mousePosTracker = setInterval(() => {\n        if(!this.isDrawing || !this.mouseOnBoard()) clearInterval(mousePosTracker);\n        else {\n          this.mousePointer.updatePosition();\n\n          if(this.getCurrentComponent == null){\n            this.setStartingPos();\n            this.createComponent();\n            this.setCurrentComponent(this.currentComponent.component);\n          }\n\n          const updatedX = this.mousePointer.x;\n          const updatedY = this.mousePointer.y;\n          this.currentComponent.component.updatePos(updatedX, updatedY);\n        }\n      }, 10); \n    },\n\n    mouseDownHandling(){      \n      this.setBoardMouseDown(true);\n      const currSelectedComponent =  this.getCurrSelectedComponent;\n      if(currSelectedComponent != null && !currSelectedComponent.mouseDown) currSelectedComponent.unselectSelf();\n\n      this.resetAllNodes();\n      \n      if(this.getCurrentComponent == null) return;\n\n      if(this.isDrawing) {\n        this.pushNewNode(this.currentComponent.component);\n        this.disableDrawingMode();\n        this.setCurrentComponent(null);\n      }\n    },\n\n    mouseUpHandling() {\n      this.setBoardMouseDown(false);\n    },\n\n    createComponent(){\n      this.currentComponent.component = new Node(this.currentComponent.startingPos.x, this.currentComponent.startingPos.y);\n    },\n    setStartingPos(){\n      this.currentComponent.startingPos.x = this.mousePointer.x;\n      this.currentComponent.startingPos.y = this.mousePointer.y;\n    },\n    mouseOnBoard(){\n      return this.board.matches(':hover');\n    },\n    resetAllNodes() {\n      // for(let machine of this.machines.values()){\n      //   machine.resetColor();\n      // }\n    },\n    // initializing the graph\n    mountInputNode() {\n      const inputNodeX = 70;\n      const inputNodeY = this.boardProbs.height / 2;\n      const newInputNode = new inputNode(inputNodeX, inputNodeY);\n      this.pushNewNode(newInputNode);\n    },\n    mountOutputNode() {\n      const outputNodex = this.boardProbs.width - 70;\n      const outputNodeY = this.boardProbs.height / 2;\n      const newOutputNode = new outputNode(outputNodex, outputNodeY);\n      this.pushNewNode(newOutputNode);\n    }\n  },\n  mounted(){\n    //setting the height and the width of the svg board\n    this.board = document.getElementById(\"board\");\n    this.boardProbs.width = window.innerWidth;\n    const headerHeight = document.getElementById(\"header\").offsetHeight;\n    this.mousePointer.originY = headerHeight;\n    this.boardProbs.height = window.innerHeight - headerHeight;\n\n    this.mountInputNode();\n    this.mountOutputNode();\n\n    document.onmousemove = function(e) {\n      var event = e || window.event;\n      window.mouseX = event.clientX;\n      window.mouseY = event.clientY;\n    }\n  }\n}\n</script>\n\n<style scoped>\n#board{\n  position: relative;\n  margin-top: 1px;\n  background-color: white;\n  z-index: 1;\n\n  transition: transform .2s;\n}\n</style>"]}]}