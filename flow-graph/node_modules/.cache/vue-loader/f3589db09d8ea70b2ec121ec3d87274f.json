{"remainingRequest":"/Users/alihassan/The_LOL/Projects/collage_related/SecondYear/Control_Systems/signal-flow-graph-solver/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/alihassan/The_LOL/Projects/collage_related/SecondYear/Control_Systems/signal-flow-graph-solver/src/components/header/simulationSection.vue?vue&type=style&index=0&id=93b69428&scoped=true&lang=css&","dependencies":[{"path":"/Users/alihassan/The_LOL/Projects/collage_related/SecondYear/Control_Systems/signal-flow-graph-solver/src/components/header/simulationSection.vue","mtime":1610627764340},{"path":"/Users/alihassan/The_LOL/Projects/collage_related/SecondYear/Control_Systems/signal-flow-graph-solver/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/alihassan/The_LOL/Projects/collage_related/SecondYear/Control_Systems/signal-flow-graph-solver/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/alihassan/The_LOL/Projects/collage_related/SecondYear/Control_Systems/signal-flow-graph-solver/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/alihassan/The_LOL/Projects/collage_related/SecondYear/Control_Systems/signal-flow-graph-solver/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/alihassan/The_LOL/Projects/collage_related/SecondYear/Control_Systems/signal-flow-graph-solver/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCiNzaW11bGF0aW9uIHsKICBoZWlnaHQ6IDEwMCU7CiAgZGlzcGxheTogZ3JpZDsKICBncmlkLXRlbXBsYXRlLXJvd3M6IHJlcGVhdCgyLCAyLjVyZW0pOwogIGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KDUsIDRyZW0pOwogIGp1c3RpZnktaXRlbXM6IGNlbnRlcjsKICBhbGlnbi1pdGVtczogY2VudGVyOwogIGp1c3RpZnktY29udGVudDogY2VudGVyOwogIGFsaWduLWNvbnRlbnQ6IGNlbnRlcjsKICBtYXJnaW4tbGVmdDogM3JlbTsKfQojbnVtLWxhYmVsIHsKICBoZWlnaHQ6IDIuMnJlbTsKICB3aWR0aDogOTAlOwogIHRleHQtYWxpZ246IGNlbnRlcjsKICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlOwogIGxpbmUtaGVpZ2h0OiAyLjJyZW07CiAgY29sb3I6IGJsYWNrOwogIHVzZXItc2VsZWN0OiBub25lOwoKICBncmlkLXJvdzogMSAvIDI7CiAgZ3JpZC1jb2x1bW46IDEgLyA0Owp9CgojcHJvZHVjdHMtaW5wdXQgewogIGJveC1zaXppbmc6IGJvcmRlci1ib3g7CiAgYm9yZGVyOiAxcHggc29saWQgYmxhY2s7CiAgYm9yZGVyLXJhZGl1czogMC41cmVtOwogIHdpZHRoOiA5MCU7CiAgaGVpZ2h0OiAycmVtOwogIGdyaWQtcm93OiAxIC8gMjsKICBncmlkLWNvbHVtbjogNCAvIDY7CiAgcGFkZGluZy1sZWZ0OiAwLjVyZW07CiAgZm9udC1zaXplOiBtZWRpdW07Cn0KI3Byb2R1Y3RzLWlucHV0Ojotd2Via2l0LW91dGVyLXNwaW4tYnV0dG9uLAojcHJvZHVjdHMtaW5wdXQ6Oi13ZWJraXQtaW5uZXItc3Bpbi1idXR0b24gewogIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZSAhaW1wb3J0YW50OwogIG1hcmdpbjogMCAhaW1wb3J0YW50Owp9CgppbnB1dFt0eXBlPW51bWJlcl06Zm9jdXMgewogIG91dGxpbmUtc3R5bGU6IG5vbmU7CiAgYm9yZGVyOiAycHggc29saWQgYmxhY2s7CiAgYm9yZGVyLXJhZGl1czogMC41cmVtOwp9CgouaWNvbiB7CiAgYm9yZGVyOiAxcHggc29saWQgIzIxMkYzRDsKICBncmlkLXJvdzogMSAvIDI7CiAgZ3JpZC1jb2x1bW46IDEvMjsKICBkaXNwbGF5OiBmbGV4OwogIGp1c3RpZnktY29udGVudDogY2VudGVyOwogIGFsaWduLWl0ZW1zOiBjZW50ZXI7Cn0KCi5zaW0tYnRuIHsKICBoZWlnaHQ6IDJyZW07CiAgd2lkdGg6IDgwJTsKICB0ZXh0LWFsaWduOiBjZW50ZXI7CiAgdmVydGljYWwtYWxpZ246IG1pZGRsZTsKICBsaW5lLWhlaWdodDogMnJlbTsKICB1c2VyLXNlbGVjdDogbm9uZTsKICBib3JkZXItcmFkaXVzOiAwLjVyZW07CiAgZ3JpZC1yb3c6IDIgLyAzOwp9Cgojc3RhcnQtZW5kLWJ0biB7IAogIGdyaWQtY29sdW1uOiAxIC8gNDsKfQoKLnN0YXJ0LWJ0biB7CiAgYmFja2dyb3VuZC1jb2xvcjogIzE2QTA4NTsKfQoKLmVuZC1idG4gewogIGJhY2tncm91bmQtY29sb3I6ICNFNzRDM0M7Cn0KCi5oaWRkZW4gewogIHZpc2liaWxpdHk6IGhpZGRlbjsKICBkaXNwbGF5OiBub25lOwp9Ci52aXNpYmxlIHsKICB2aXNpYmlsaXR5OiB2aXNpYmxlOwogIGRpc3BsYXk6IGZsZXg7Cn0KCiNyZXBsYXktYnRuIHsgCiAgYmFja2dyb3VuZC1jb2xvcjogI0Y0RDAzRjsKICBncmlkLWNvbHVtbjogNCAvIDY7Cn0K"},{"version":3,"sources":["simulationSection.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"simulationSection.vue","sourceRoot":"src/components/header","sourcesContent":["<template>\n  <div id=\"simulation\">\n    <div id=\"num-label\">Number of products</div>\n    <input type=\"number\" id=\"products-input\" placeholder=\"20\" v-model=\"productsNumber\">\n    <div id=\"start-end-btn\" :class=\"['sim-btn', setStartEndBtn()]\" @click=\"TriggerSimulation()\">{{startEndBtnText}}</div>\n    <div id=\"replay-btn\" class=\"hidden\" @click=\"toggleReplay()\">\n      {{replayText}}\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapGetters ,mapActions } from 'vuex';\nimport axios from 'axios';\n\nexport default {\n  name: 'simulation',\n  data() {\n    return {\n      start: true,\n      productsNumber: 20,\n      startEndBtnText: \"start simulation\",\n      replayText: \"repaly\",\n      simulationFinished: false,\n      replayBtnStatus: 'hidden',\n      seconds: 1,\n      replayFinished: false,\n      replayRunning: false,\n    }\n  },\n  computed: mapGetters(['queues', 'machines', 'getErrorCard']),\n  methods: {\n    ...mapActions(['setErrorMsg']),\n    toggleStartEnd() {\n      this.start = !this.start;\n      this.setStartEndBtn();\n    },\n    setStartEndBtn() {\n      if(!this.start) {\n        this.startEndBtnText = \"end simulation\";\n        return \"end-btn\";\n      }\n      else {\n        this.startEndBtnText = \"start simulation\";\n        return \"start-btn\";\n      }\n    },\n    showReplayBtn() {\n      document.getElementById(\"replay-btn\").className = 'sim-btn';\n    },\n    hideReplayBtn() {\n      document.getElementById(\"replay-btn\").className = 'hidden';\n    },\n    TriggerSimulation() {\n      if(this.start && !this.isValidCircuit()) return;\n      this.toggleStartEnd();\n      if(!this.start) {\n        const queuesJson = this.getQueuesInfo();\n        const machinesJson = this.getMachinesInfo();\n        const productsNumber = this.getProductsNumber();\n\n        this.disableInput();\n        document.getElementById(\"board\").style.pointerEvents = 'none';\n\n        this.startSimulation(machinesJson, queuesJson, productsNumber);\n      }\n      else {\n        this.endSimulation();\n      }\n    },\n    //requests helper methods\n    startSimulation(machinesJson, queuesJson, productsNumber) {\n      this.hideReplayBtn();\n      this.resetAllMachines();\n      this.resetAllQueues();\n      this.simulationFinished = false;\n      this.replayFinished = false;\n      this.seconds = 0;\n\n      axios.post('http://localhost:8085//startSimulation', null, \n        {params :{\n          jsonMachines: machinesJson,\n          jsonQueues: queuesJson,\n          numberOfProducts: productsNumber,\n        }})\n        .then( () => {\n          const tracker = setInterval(() => {\n            if(this.simulationFinished) {\n              setTimeout(() => {\n                this.refreshCircuit();\n                clearInterval(tracker);\n                this.showReplayBtn();\n                this.toggleStartEnd();\n              }, 500);\n            }\n\n            else {\n              this.refreshCircuit();\n              this.seconds ++;\n            }\n          }, 1000);\n        })\n        .catch( (error) => console.log(error));\n    },\n    //replay\n    toggleReplay() {\n      if(!this.replayRunning) {\n        this.replay();\n        this.replayText = \"end replay\";\n      }\n      else {\n        this.endReplay();\n        this.replayText = \"replay\";\n      }\n      this.replayRunning = !this.replayRunning;\n    },\n    replay() {\n      this.resetAllMachines();\n      this.resetAllQueues();\n      let currSecond = 1;\n      this.replayFinished = false;\n\n      this.disableInput();\n      document.getElementById(\"board\").style.pointerEvents = 'none';\n      \n      const replayTracker = setInterval(() => {\n        if(currSecond > this.seconds || this.replayFinished) {\n          this.endReplay();\n      \n          clearInterval(replayTracker);\n        }\n        else {\n          axios.get('http://localhost:8085//replay', \n          {params: {\n            second: currSecond ++,\n          }})\n          .then( (response) => {\n            this.updateCircuit(response.data);\n          })\n          .catch( (error) => console.log(error));\n        }\n      }, 1000);\n    },\n    endReplay() {\n      this.replayFinished = true;\n      document.getElementById(\"board\").style.pointerEvents = 'auto';\n      this.productsNumber = 20;\n      this.enableInput();\n      this.replayRunning = false;\n      this.replayText = 'replay';\n    },\n    isSimulationOver() {\n      axios.get('http://localhost:8085//isSimulationFinished')\n      .then( (response) => {\n        const isSimulationFinished = response.data;\n        if(isSimulationFinished) {\n          this.endSimulation();\n        }\n      })\n      .catch( (error) => console.log(error));\n    },\n    refreshCircuit() {\n      axios.get('http://localhost:8085//getCurrentImage')\n      .then( (response) => {\n        this.updateCircuit(response.data);\n\n        this.isSimulationOver();\n      })\n      .catch( (error) => console.log(error));\n    },\n    updateCircuit(circuitInfo) {\n      const machinesInfo = circuitInfo.machines;\n      const queuesInfo = circuitInfo.queues;\n      const currNumberOfProducts = circuitInfo.productsNum;\n      this.updateMachines(machinesInfo);\n      this.updateQueues(queuesInfo);\n      this.updateNumberOfProducts(currNumberOfProducts);    \n    },\n    updateNumberOfProducts(numberOfProducts) {\n      this.productsNumber = numberOfProducts;\n    },\n    endSimulation() {\n      this.simulationFinished = true;\n      document.getElementById(\"board\").style.pointerEvents = 'auto';\n      this.productsNumber = 20;\n      this.enableInput();\n    },\n    resetAllMachines() {\n      for(let machine of this.machines.values()){\n        machine.resetColor();\n      }\n    },\n    resetAllQueues() {\n      for(let queue of this.queues.values()){\n        queue.resetCount();\n      }\n    },\n    //parsing machines info\n    updateMachines(machinesInfo) {\n      for(let machine of machinesInfo){\n        const machineId = machine.id;\n        const updatedMachineColor = machine.color;\n        const currentMachine = this.machines.get(machineId);\n\n        const oldColor = currentMachine.fillColor;\n        currentMachine.updateFillColor(updatedMachineColor);\n        if(oldColor != updatedMachineColor && oldColor != \"rgb(187,143,206)\") currentMachine.flash(oldColor)\n      }\n    },\n    updateQueues(queuesInfo) {\n      for(let queue of queuesInfo) {\n        const queueId = queue.id;\n        const queueSize = queue.numberOfProducts;\n        const currentQueue = this.queues.get(queueId);\n        currentQueue.updateProductsNumber(queueSize);\n      }\n    },\n    isValidCircuit() {\n      // any queue except the starting queue must have a least one input\n      for(let queue of this.queues.values()) {\n        if(!queue.isStartingQueue && queue.fromConnectionPoint.inConnectors.size == 0) {\n          this.setErrorMsg(`Q${queue.code} has no input lines`);\n          this.getErrorCard.showErrorMsg();\n          return false;\n        }\n      }\n      // any machine must have exactly one output and at least one input\n      for(let machine of this.machines.values()) {\n        if(machine.fromConnectionPoint.inConnectors.size == 0) {\n          this.setErrorMsg(`M${machine.code} has no input lines`);\n          this.getErrorCard.showErrorMsg();\n          return false;\n        }\n\n        if(machine.toConnectionPoint.outConnectors.size == 0) {\n          this.setErrorMsg(`M${machine.code} has no output lines`);\n          this.getErrorCard.showErrorMsg();\n          return false;\n        }\n      }\n\n      if(this.productsNumber == \"\") {\n        this.setErrorMsg(`products number cannot be empty`);\n        this.getErrorCard.showErrorMsg();\n        return false;\n      }\n\n      if(this.productsNumber == 0) {\n        this.setErrorMsg(`products number cannot be 0`);\n        this.getErrorCard.showErrorMsg();\n        return false;\n      }\n\n      return true;\n    },\n    getQueuesInfo() {\n      const allQueuesInfo = [];\n      for(let queue of this.queues.values()) {\n        queue.unselectSelf();\n        if(queue.isEndQueue()) allQueuesInfo.push(new this.QueueInfo(queue.code, true));\n        else allQueuesInfo.push(new this.QueueInfo(queue.code, false));\n      }\n\n      return JSON.stringify(allQueuesInfo);\n    },\n    getMachinesInfo() {\n      const allMahinesInfo = [];\n      for(let machine of this.machines.values()) {\n        machine.unselectSelf();\n        const fromQueues = machine.fromConnectionPoint.fromComponents.values();\n        const fromQueuesIds = [];\n        for(let queue of fromQueues) fromQueuesIds.push(queue.code);\n\n        const toQueue = machine.toConnectionPoint.outConnectors.values().next().value.to.code;\n        allMahinesInfo.push(new this.MachinesInfo(machine.code, fromQueuesIds, toQueue))\n      }\n\n      return JSON.stringify(allMahinesInfo);\n    },\n    getProductsNumber() {\n      return Math.trunc(+this.productsNumber);\n    },\n    disableInput() {\n      document.getElementById(\"products-input\").disabled = true;\n    },\n    enableInput() {\n      document.getElementById(\"products-input\").disabled = false;\n    },\n    //helper\n    QueueInfo(id, isEndQueue) {\n      return {\n        ID: id,\n        isEndQueue: isEndQueue,\n      }\n    },\n    MachinesInfo(id, fromQueues, toQueue) {\n      return {\n        ID: id,\n        fromQueues: fromQueues,\n        toQueue: toQueue,\n      }\n    },\n  },\n}\n</script>\n\n<style scoped>\n#simulation {\n  height: 100%;\n  display: grid;\n  grid-template-rows: repeat(2, 2.5rem);\n  grid-template-columns: repeat(5, 4rem);\n  justify-items: center;\n  align-items: center;\n  justify-content: center;\n  align-content: center;\n  margin-left: 3rem;\n}\n#num-label {\n  height: 2.2rem;\n  width: 90%;\n  text-align: center;\n  vertical-align: middle;\n  line-height: 2.2rem;\n  color: black;\n  user-select: none;\n\n  grid-row: 1 / 2;\n  grid-column: 1 / 4;\n}\n\n#products-input {\n  box-sizing: border-box;\n  border: 1px solid black;\n  border-radius: 0.5rem;\n  width: 90%;\n  height: 2rem;\n  grid-row: 1 / 2;\n  grid-column: 4 / 6;\n  padding-left: 0.5rem;\n  font-size: medium;\n}\n#products-input::-webkit-outer-spin-button,\n#products-input::-webkit-inner-spin-button {\n  -webkit-appearance: none !important;\n  margin: 0 !important;\n}\n\ninput[type=number]:focus {\n  outline-style: none;\n  border: 2px solid black;\n  border-radius: 0.5rem;\n}\n\n.icon {\n  border: 1px solid #212F3D;\n  grid-row: 1 / 2;\n  grid-column: 1/2;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.sim-btn {\n  height: 2rem;\n  width: 80%;\n  text-align: center;\n  vertical-align: middle;\n  line-height: 2rem;\n  user-select: none;\n  border-radius: 0.5rem;\n  grid-row: 2 / 3;\n}\n\n#start-end-btn { \n  grid-column: 1 / 4;\n}\n\n.start-btn {\n  background-color: #16A085;\n}\n\n.end-btn {\n  background-color: #E74C3C;\n}\n\n.hidden {\n  visibility: hidden;\n  display: none;\n}\n.visible {\n  visibility: visible;\n  display: flex;\n}\n\n#replay-btn { \n  background-color: #F4D03F;\n  grid-column: 4 / 6;\n}\n</style>"]}]}