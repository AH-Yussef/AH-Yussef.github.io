{"remainingRequest":"/Users/alihassan/The_LOL/Projects/collage_related/SecondYear/Control_Systems/signal-flow-graph-solver/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/alihassan/The_LOL/Projects/collage_related/SecondYear/Control_Systems/signal-flow-graph-solver/src/components/header/solveSection.vue?vue&type=style&index=0&id=545c6008&scoped=true&lang=css&","dependencies":[{"path":"/Users/alihassan/The_LOL/Projects/collage_related/SecondYear/Control_Systems/signal-flow-graph-solver/src/components/header/solveSection.vue","mtime":1619907819349},{"path":"/Users/alihassan/The_LOL/Projects/collage_related/SecondYear/Control_Systems/signal-flow-graph-solver/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/alihassan/The_LOL/Projects/collage_related/SecondYear/Control_Systems/signal-flow-graph-solver/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/alihassan/The_LOL/Projects/collage_related/SecondYear/Control_Systems/signal-flow-graph-solver/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/alihassan/The_LOL/Projects/collage_related/SecondYear/Control_Systems/signal-flow-graph-solver/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/alihassan/The_LOL/Projects/collage_related/SecondYear/Control_Systems/signal-flow-graph-solver/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKI3NvbHV0aW9uIHsKICBoZWlnaHQ6IDEwMCU7CiAgd2lkdGg6IDEwcmVtOwogIGRpc3BsYXk6IGZsZXg7CiAgYWxpZ24taXRlbXM6IGNlbnRlcjsKICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsKfQoKI3NvbHZlLWJ0biB7IAogIGJhY2tncm91bmQtY29sb3I6IHJnYigzMCwgODksIDIwMik7CiAgYm9yZGVyLXJhZGl1czogMC41cmVtOwogIGhlaWdodDogMnJlbTsKICB3aWR0aDogNnJlbTsKCiAgdGV4dC1hbGlnbjogY2VudGVyOwogIHZlcnRpY2FsLWFsaWduOiBjZW50ZXI7CiAgbGluZS1oZWlnaHQ6IDJyZW07CgogIGNvbG9yOiB3aGl0ZTsKICB1c2VyLXNlbGVjdDogbm9uZTsKfQo="},{"version":3,"sources":["solveSection.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoLA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA","file":"solveSection.vue","sourceRoot":"src/components/header","sourcesContent":["<template>\n  <div id=\"solution\">\n    <div id=\"solve-btn\" @click=\"triggerSolve()\">Solve</div>\n  </div>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex';\nimport { solveforwardpath } from \"../../solvingAlgo/forward_paths.js\";\nimport { findLoops } from \"../../solvingAlgo/loops.js\";\nimport { transferFunction } from \"../../solvingAlgo/Transfer_ function.js\";\n\nexport default {\n  name: 'solve',\n  data() {\n    return {\n      nodeNum: 0,\n    }\n  },\n  computed: mapGetters(['nodes']),\n  methods: {\n    triggerSolve() {\n      // const graphInfo = this.getGraphInfo();\n      // const graphInfo =  [[0,1,0,0,1,0,0,1,0],\n      //                     [0,0,1,0,0,0,1,0,1],\n      //                     [1,1,0,1,0,1,0,0,0],\n      //                     [0,0,0,0,1,0,0,0,0],\n      //                     [0,1,0,0,0,0,0,0,0],\n      //                     [0,0,0,1,0,0,0,0,0],\n      //                     [0,0,0,0,0,0,0,0,0],\n      //                     [0,0,0,0,0,0,0,0,1],\n      //                     [0,0,0,0,0,0,0,1,0]];\n\n      const graphInfo = this.getGraphInfo();\n\n      this.nodeNum = graphInfo.length;\n\n      const forwardPaths = solveforwardpath(graphInfo);\n      const loops = findLoops(graphInfo);\n\n      // const testloops = {\n      //   loops : [[3,4,3], [4,5,4], [6,6], [2,6,5,2], [2,3,4,5,2]],\n      //   gains : [-10,-4,-1,-20,-100]\n      // };\n      // const testpaths = {\n      //   paths : [[1,2,3,4,5], [1,2,6,5]],\n      //   gains : [100, 20]\n      // }\n\n      const computations = transferFunction(forwardPaths, loops);\n      console.log(forwardPaths);\n      console.log(loops);\n\n      this.openSolutionArea();\n      this.showSolution(forwardPaths, loops, computations);\n      document.getElementById(\"board\").style.pointerEvents = 'none';\n    },\n    getGraphInfo() {\n      const matrixSize = this.nodes.size;\n      const graphInfo = new Array(matrixSize);\n\n      for(let node of this.nodes.values()) {\n        node.unselectSelf();\n\n        const outcomingBranches = node.toConnectionPoint.outConnectors.values();\n        const node_nodeGains = new Array(matrixSize).fill(0);\n        let toNodeIndex = 0;\n        \n        for(let branch of outcomingBranches) {\n          if(branch.to.isOutputNode) toNodeIndex = matrixSize -1;\n          else toNodeIndex = branch.to.code;\n          node_nodeGains[toNodeIndex] = branch.gain;\n        }\n\n        let nodeIndex = 0;\n        if(node.isInputNode) nodeIndex = 0;\n        else if(node.isOutputNode) nodeIndex = matrixSize -1;\n        else nodeIndex = node.code;\n\n        graphInfo[nodeIndex] = node_nodeGains;\n      }\n\n      return graphInfo;\n    },\n    showSolution(forwardPaths, graphLoops, computations){\n      document.getElementById(\"steps\").innerHTML = \"\";\n      this.addTitle(\"Forward paths :\");\n\n      let pathIndex = 1;\n      for(let path of forwardPaths.paths) {\n        this.addPath(path, pathIndex++);\n      }\n\n      this.addTitle(\"Loops :\");\n\n      let loopIndex = 1;\n      for(let loop of graphLoops.loops) {\n        this.addLoop(loop, loopIndex++);\n      }\n\n      this.addTitle(\"Transfer function :\");\n\n      let deltaIndex = 1;\n      for(let delta of computations.deltas) {\n        this.addDelta(delta, deltaIndex++);\n      }\n      this.addDelta(computations.systemDelta, deltaIndex, false);\n\n      this.addFormula();\n      this.RenderLatex();\n    },\n    addTitle(titleText){\n      const title = document.createElement('div');\n      title.innerHTML = `$$\\\\underline{\\\\text{${titleText}}}$$`;\n      title.className = \"solve-title\";\n      document.getElementById(\"steps\").appendChild(title);\n    },\n    addPath(pathSeq, pathIndex) {\n      const n = pathSeq.length;\n      let path = document.createElement('div');\n      path.innerHTML = `$$P_${pathIndex} :`;\n\n      for(let i = 0; i < n -1; i++) {\n        path.innerHTML += `${this._getNodeIndex(pathSeq[i])} \\\\xrightarrow{}`;\n      }\n      path.innerHTML += `${this._getNodeIndex(pathSeq[n-1])}$$`;\n\n      path.className = \"solution-info\";\n      document.getElementById(\"steps\").appendChild(path);\n    },\n    addLoop(loopSeq, loopIndex) {\n      const n = loopSeq.length;\n      let loop = document.createElement('div');\n      loop.innerHTML = `$$L_${loopIndex}: `;\n\n      for(let i = 0; i < n -1; i++) {\n        loop.innerHTML += `${this._getNodeIndex(loopSeq[i])} \\\\xrightarrow{}`;\n      }\n      loop.innerHTML += `${this._getNodeIndex(loopSeq[n-1])}$$`;\n\n      loop.className = \"solution-info\";\n      document.getElementById(\"steps\").appendChild(loop);\n    },\n    addDelta(deltaValue, deltaIndex, addSubIndex = true) {\n      let delta = document.createElement('div');\n      if(addSubIndex) delta.innerHTML = `$$\\\\Delta_${deltaIndex} = ${deltaValue}$$`;\n      else delta.innerHTML = `$$\\\\Delta = ${deltaValue}$$`;\n\n      delta.className = \"solution-info\";\n      document.getElementById(\"steps\").appendChild(delta);\n    },\n    addFormula() {\n      let formula = document.createElement('div');\n      formula.innerHTML = \"$$C(S) / R(S) = 5$$\";\n      formula.className = \"solution-info\";\n      document.getElementById(\"steps\").appendChild(formula);\n    },\n    _getNodeIndex(nodeCode) {\n      let nodeIndex = \"\";\n      if(nodeCode == 0) nodeIndex = \"R\";\n      else if(nodeCode == this.nodeNum-1) nodeIndex = \"C\";\n      else nodeIndex = nodeCode;\n\n      return nodeIndex;\n    },\n    openSolutionArea() {\n      this.$root.$refs.solutionArea.open();\n      document.getElementById(\"board\").style.transform = \"scale(0.5)\";\n      document.getElementById(\"board\").style.left = \"-40%\";\n    },\n    RenderLatex() {\n      if(window.MathJax) {\n        window.MathJax.Hub.Queue([\"Typeset\", window.MathJax.Hub]);\n      }\n    }\n  },\n}\n</script>\n\n<style scoped>\n#solution {\n  height: 100%;\n  width: 10rem;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n#solve-btn { \n  background-color: rgb(30, 89, 202);\n  border-radius: 0.5rem;\n  height: 2rem;\n  width: 6rem;\n\n  text-align: center;\n  vertical-align: center;\n  line-height: 2rem;\n\n  color: white;\n  user-select: none;\n}\n</style>"]}]}