{"remainingRequest":"/Users/alihassan/The_LOL/Projects/collage_related/SecondYear/Control_Systems/signal-flow-graph-solver/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/alihassan/The_LOL/Projects/collage_related/SecondYear/Control_Systems/signal-flow-graph-solver/src/components/board.vue?vue&type=style&index=0&id=1796d806&scoped=true&lang=css&","dependencies":[{"path":"/Users/alihassan/The_LOL/Projects/collage_related/SecondYear/Control_Systems/signal-flow-graph-solver/src/components/board.vue","mtime":1610474856891},{"path":"/Users/alihassan/The_LOL/Projects/collage_related/SecondYear/Control_Systems/signal-flow-graph-solver/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/alihassan/The_LOL/Projects/collage_related/SecondYear/Control_Systems/signal-flow-graph-solver/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/alihassan/The_LOL/Projects/collage_related/SecondYear/Control_Systems/signal-flow-graph-solver/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/alihassan/The_LOL/Projects/collage_related/SecondYear/Control_Systems/signal-flow-graph-solver/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/alihassan/The_LOL/Projects/collage_related/SecondYear/Control_Systems/signal-flow-graph-solver/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKI2JvYXJkewogIG1hcmdpbi10b3A6IDFweDsKICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTsKICBwb3NpdGlvbjogcmVsYXRpdmU7CiAgei1pbmRleDogMTsKfQo="},{"version":3,"sources":["board.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmJA;AACA;AACA;AACA;AACA;AACA","file":"board.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <svg  id=\"board\" :width=\"boardProbs.width\" :height=\"boardProbs.height\"\n        version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\"\n        @mouseover=\"mouseOverHandling()\"\n        @mousedown=\"mouseDownHandling()\"\n        @mouseup=\"mouseUpHandling()\">\n  </svg>\n</template>\n\n<script>\nimport { mapGetters, mapActions} from 'vuex';\nimport { Machine } from '../assemblyLineComponents/machine.js';\nimport { Queue } from '../assemblyLineComponents/queue.js';\nimport { StartingQueue } from '../assemblyLineComponents/startingQueue.js';\n\nexport default {\n  name: 'board',\n  data() {\n    return {\n      boardProbs: {\n        width: 100,\n        height: 100,\n      },\n      components: {\n        queue: \"queue\",\n        machine: \"machine\",\n      },\n      currentComponent: {\n        component: null,\n        startingPos: { x: 0, y: 0 },\n      },\n      mousePointer: {\n        originX: 0,\n        originY: 0,\n        x: 0, //current position relative to x-axis\n        y: 0, //current position relative to y-axis\n        updatePosition: function() {\n          this.x = window.mouseX - this.originX;\n          this.y = window.mouseY - this.originY;\n        },\n      }\n    }\n  },\n  computed: mapGetters(['isDrawing', 'componentType', 'getCurrentComponent', 'getCurrSelectedComponent', 'queues', 'machines']),\n  methods: {\n    ...mapActions(['disableDrawingMode', 'pushNewQueue', 'pushNewMachine', 'setCurrentComponent', 'setBoardMouseDown']),\n    //Drawing Shapes\n    mouseOverHandling(){\n      const mousePosTracker = setInterval(() => {\n        if(!this.isDrawing || !this.mouseOnBoard()) clearInterval(mousePosTracker);\n        else {\n          this.mousePointer.updatePosition();\n\n          if(this.getCurrentComponent == null){\n            this.setStartingPos();\n            this.createComponent();\n            this.setCurrentComponent(this.currentComponent.component);\n          }\n\n          const updatedX = this.mousePointer.x;\n          const updatedY = this.mousePointer.y;\n          this.currentComponent.component.updatePos(updatedX, updatedY);\n        }\n      }, 10); \n    },\n\n    mouseDownHandling(){      \n      this.setBoardMouseDown(true);\n      const currSelectedComponent =  this.getCurrSelectedComponent;\n      if(currSelectedComponent != null && !currSelectedComponent.mouseDown) currSelectedComponent.unselectSelf();\n\n      this.resetAllMachines();\n      this.resetAllQueues();\n      \n      if(this.getCurrentComponent == null) return;\n\n      if(this.isDrawing) {\n        if(this.isQueue()) this.pushNewQueue(this.currentComponent.component);\n        else if(this.isMachine()) this.pushNewMachine(this.currentComponent.component);\n        this.disableDrawingMode();\n        this.setCurrentComponent(null);\n      }\n    },\n\n    mouseUpHandling() {\n      this.setBoardMouseDown(false);\n    },\n\n    createComponent(){\n      if (this.isQueue()){\n        this.currentComponent.component = new Queue(this.currentComponent.startingPos.x, this.currentComponent.startingPos.y);\n      }\n      else if(this.isMachine()){\n        this.currentComponent.component = new Machine(this.currentComponent.startingPos.x, this.currentComponent.startingPos.y);\n      }\n    },\n    setStartingPos(){\n      this.currentComponent.startingPos.x = this.mousePointer.x;\n      this.currentComponent.startingPos.y = this.mousePointer.y;\n    },\n    mouseOnBoard(){\n      return this.board.matches(':hover');\n    },\n    isQueue(){\n      return this.componentType === this.components.queue;\n    },\n    isMachine(){\n      return this.componentType === this.components.machine;\n    },\n    resetAllMachines() {\n      for(let machine of this.machines.values()){\n        machine.resetColor();\n      }\n    },\n    resetAllQueues() {\n      for(let queue of this.queues.values()){\n        queue.updateProductsNumber(0);\n      }\n    },\n    //initializing the circuit\n    mountStartingQueue() {\n      const startingQueueX = this.boardProbs.width - 70;\n      const startingQueueY = this.boardProbs.height / 2;\n      const startingQueue = new StartingQueue(startingQueueX, startingQueueY);\n      this.pushNewQueue(startingQueue);\n    }\n  },\n  mounted(){\n    //setting the height and the width of the svg board\n    this.board = document.getElementById(\"board\");\n    this.boardProbs.width = window.innerWidth;\n    const headerHeight = document.getElementById(\"header\").offsetHeight;\n    this.mousePointer.originY = headerHeight;\n    this.boardProbs.height = window.innerHeight - headerHeight;\n\n    this.mountStartingQueue();\n\n    document.onmousemove = function(e) {\n      var event = e || window.event;\n      window.mouseX = event.clientX;\n      window.mouseY = event.clientY;\n    }\n  }\n}\n</script>\n\n<style scoped>\n#board{\n  margin-top: 1px;\n  background-color: white;\n  position: relative;\n  z-index: 1;\n}\n</style>"]}]}